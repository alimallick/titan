#!/bin/bash
# Check if the script is run as root user
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run with root user permissions."
    echo "Please try using the 'Use sudo -i' command to switch to the root user, then run this script again."
    exit 1
be

echo "=======================Titan Node=======================" 

#!/bin/bash
echo -e ""
echo -e ""
echo -e '\e[34m'
echo -e ' ██████╗██████╗ ██╗   ██╗██████╗ ████████╗ ██████╗  █████╗ ██╗██████╗ ██████╗ ██████╗  ██████╗ ██████╗ ██╗  ██╗██╗███╗   ██╗██████╗ ██╗'
echo -e '██╔════╝██╔══██╗╚██╗ ██╔╝██╔══██╗╚══██╔══╝██╔═══██╗██╔══██╗██║██╔══██╗██╔══██╗██╔══██╗██╔═══██╗██╔══██╗██║  ██║██║████╗  ██║██╔══██╗██║'
echo -e '██║     ██████╔╝ ╚████╔╝ ██████╔╝   ██║   ██║   ██║███████║██║██████╔╝██║  ██║██████╔╝██║   ██║██████╔╝███████║██║██╔██╗ ██║██║  ██║██║'
echo -e '██║     ██╔══██╗  ╚██╔╝  ██╔═══╝    ██║   ██║   ██║██╔══██║██║██╔══██╗██║  ██║██╔══██╗██║   ██║██╔═══╝ ██╔══██║██║██║╚██╗██║██║  ██║██║'
echo -e '╚██████╗██║  ██║   ██║   ██║        ██║   ╚██████╔╝██║  ██║██║██║  ██║██████╔╝██║  ██║╚██████╔╝██║     ██║  ██║██║██║ ╚████║██████╔╝██║'
echo -e ' ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚═╝        ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝'
echo -e '\e[0m'
echo -e "                 \033[48;2;9;10;12m CryptoAirdropHindi \e[0m";
echo -e "\e[0;37m Subscribe Our Telegram Channel: \e[4;35mhttps://t.me/Crypto_airdropHM/";
echo -e "\e[0m"
echo -e ""
echo -e ""

read -p "Enter your identity code: " id

# Let the user enter the number of containers to be created.
read -p "Please enter the number of nodes you want to create. One IP is limited to a maximum of 5 nodes: " container_count

# Let the user enter the hard disk size limit of each node (in GB)
read -p "Please enter the hard disk size limit of each node (in GB, for example: 1 represents 1GB, 2 represents 2GB) : " disk_size_gb

# Ask for the user data volume storage directory, and set the default value.
read -p "Please enter the storage directory for the volume data [default: /mnt/docker_volumes]: " volume_dir
volume_dir=${volume_dir:-/mnt/docker_volumes}

apt update

# Check if Docker is installed Install
if ! command -v docker &> /dev/null
then
    echo "Docker not detected, installing. .."
    apt-get install ca-certificates curl gnupg lsb-release
    
    # Install the latest version of Docker
    apt-get install docker.io -y
else
    echo "Docker has been installed."
be

# Pull the Docker image
docker pull nezha123/titan-edge

# Create a directory to store image files
mkdir -p $volume_dir

# Create a user-specified number of containers
for i in $(seq 1 $container_count)
do
    disk_size_mb=$((disk_size_gb * 1024))
    
    # Create an image file system with a specific size for each container.
    volume_path="$volume_dir/volume_$i.img"
    sudo dd if=/dev/zero of=$volume_path bs=1M count=$disk_size_mb
    sudo mkfs.ext4 $volume_path

    # Create directories and mount filesystems
    mount_point="/mnt/my_volume_$i"
    mkdir -p $mount_point
    sudo mount -o loop $volume_path $mount_point

    # Will be mounted Add information to /etc/fstab
    echo "$volume_path $mount_point ext4 loop,defaults 0 0" | sudo tee -a /etc/fstab

    # Run the container and set the restart policy to always
    container_id=$(docker run -d --restart always -v $mount_point:/root/.titanedge/storage --name "titan$i" nezha123/titan-edge)

    echo "node titan$i telah memulai ID containe $container_id"

    sleep 30
    
    # Enter the container and perform binding and other commands
    docker exec -it $container_id bash -c "\
        titan-edge bind --hash=$id https://api-test1.container1.titannet.io/api/v2/device/binding"
done

echo "===============================All nodes are setup and started==================================."
